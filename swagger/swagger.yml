swagger: '2.0'
info:
  title: Naddic platform API
  description: Naddic platform API
  version: 1.0.0
  contact:
    email: youngtip@naddic.com
  license: {}
basePath: /v1
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  '/auth/checkDisplayName/{displayname}':
    get:
      tags:
        - auth
      description: Check duplicate a displayname
      operationId: AuthController.CheckDisplayName
      parameters:
        - in: path
          name: displayname
          description: Input displayname
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          description: 'code:10002 displayname is empty<br/> code:10006 displayname is already exists'
          schema:
            $ref: '#/definitions/models.ErrRespCode'

  /auth/register:
    post:
      tags:
        - auth
      description: Create local user
      operationId: AuthController.CreateUser
      parameters:
        - in: body
          name: Create Local User
          description: Input displayname, email and password with JSON
          schema:
            type: object
            required:
              - displayname,email,password 
            properties:
              displayname:
                type: string
              email:
                type: string
              password:
                type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'

  /auth/login:
    post:
      tags:
        - auth
      description: Local Login
      operationId: AuthController.Login
      parameters:
        - in: body
          name: Local Login
          description: Input displayname and password to local login.
          schema:
            type: object
            required:
              - displayname,password 
            properties:
              displayname:
                type: string
              password:
                type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'

  /auth/checkLogin:
    get:
      security:
        - Bearer: []
      tags:
        - auth
      description: 'Check login with JWT. Set Authorization Bearer token in header. You can click the lock icon on right side and set JWT. ex) Authorization: Bearer JWT'
      operationId: AuthController.CheckLogin
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'

  '/user/confirmEmail/{confirmToken}':
    post:
      tags:
        - user
      description: Confrim email with confirm email token
      operationId: UserController.ConfirmEmail
      parameters:
        - in: path
          name: confirmToken
          description: Input the confirm email token
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'
            
  '/user/resendConfirmEmail/{email}':
    post:
      tags:
        - user
      description: resend email confirm token
      operationId: UserController.ResendConfirmEmail
      parameters:
        - in: path
          name: email
          description: Input the email
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'

  '/user/forgotPassword/{email}':
    post:
      tags:
        - user
      description: forgot password. 
      operationId: UserController.ResendConfirmEmail
      parameters:
        - in: path
          name: email
          description: email
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'
            
  '/user/isValidResetPasswordToken/{resetToken}':
    post:
      tags:
        - user
      description: check valid password reset token
      operationId: UserController.IsValidResetPasswordToken
      parameters:
        - in: path
          name: resetToken
          description: resetToken
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'

  /user/resetPassword/:
    post:
      tags:
        - user
      description: Check password reset token
      operationId: UserController.ResetPassword
      parameters:
        - in: path
          name: resetToken
          description: resetToken
          required: true
          type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'
  
  /user/getProfile:
    post:
      security:
        - Bearer: []
      tags:
        - user
      description: Get User Info with JWT
      operationId: UserController.GetProfile
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'

  /user/updateProfile:
    post:
      security:
        - Bearer: []
      tags:
        - user
      description: Update user's displayname or email
      operationId: UserController.UpdateProfile
      parameters:
        - in: body
          name: Update user's displayname or email
          description: Input displayname or email.
          schema:
            type: object
            properties:
              displayname:
                type: string
              email:
                type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'

  /user/updatePassword:
    post:
      security:
        - Bearer: []
      tags:
        - user
      description: Update user's password
      operationId: UserController.UpdatePassword
      parameters:
        - in: body
          name: Update user's password
          description: Input password
          schema:
            type: object
            properties:
              displayname:
                type: string
              email:
                type: string
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'

  /billing/getChargeItems/:
    get:
      tags:
        - billing
      description: Get Charge Item List
      operationId: BillingController.GetChargeItems
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/models.RespCode'
        '400':
          schema:
            $ref: '#/definitions/models.ErrRespCode'

            
definitions:
  models.RespCode:
    title: RespCode
    type: RespCode
    properties:
      Code:
        type: string
      Message:
        type: string
      DevInfo:
        type: string
      Data:
        type: string
  models.ErrRespCode:
    title: ErrRespCode
    type: ErrRespCode
    properties:
      Code:
        type: string
      Message:
        type: string
      DevInfo:
        type: string
